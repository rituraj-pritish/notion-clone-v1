# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Ancestry {
  icon: IconType
  id: String!
  title: String!
}

type Block {
  created: UserAndDate!
  id: ID!
  lastEdited: UserAndDate!
  object: RichTextObject!
  order: Float!
  parent: BlockParent!
  type: BlockType!
}

type BlockParent {
  id: ID!
  type: BlockParentType!
}

input BlockParentInput {
  id: ID!
  type: BlockParentType!
}

enum BlockParentType {
  DATABASE
  PAGE
}

enum BlockType {
  TEXT
}

type Cover {
  url: String!
}

input CreateBlockInput {
  object: RichTextObjectInput!
  order: Float!
  parent: BlockParentInput!
  type: BlockType!
}

input CreatePageInput {
  hierarchy: HierarchyInput
  icon: IconInput
  parent: ParentInput!
  properties: PropertiesInput
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Emoji {
  emoji: String!
  type: String!
}

type File {
  type: String!
  url: String!
}

type Hierarchy {
  children: [ID!]
  index: Float!
  parent: ID
  root: ID
}

input HierarchyInput {
  children: [ID!]
  index: Float
  parent: ID
  root: ID
}

input IconInput {
  emoji: String
  type: String!
  url: String
}

union IconType = Emoji | File

type Mutation {
  createBlock(createBlockInput: CreateBlockInput!): Block!
  createPage(createPageInput: CreatePageInput!): Page!
  deleteBlock(id: String!): Boolean!
  deletePage(id: String!): Page!
  signup(newUserInput: UserInput!): User!
  updateBlock(updateBlockInput: UpdateBlockInput!): Block!
  updatePage(updatePageInput: UpdatePageInput!): Page!
}

type Page {
  archived: Boolean!
  cover: Cover
  created: UserAndDate!
  favorite: Boolean!
  hierarchy: Hierarchy!
  icon: IconType
  id: ID!
  lastEdited: UserAndDate!
  parent: Parent!
  properties: Properties!
  url: String!
}

type PageWithAncestry {
  ancestry: [Ancestry!]!
  archived: Boolean!
  cover: Cover
  created: UserAndDate!
  favorite: Boolean!
  hierarchy: Hierarchy!
  icon: IconType
  id: ID!
  lastEdited: UserAndDate!
  parent: Parent!
  properties: Properties!
  url: String!
}

type Parent {
  id: ID!
  type: ParentType!
}

input ParentInput {
  id: String!
  type: String!
}

enum ParentType {
  PAGE
  WORKSPACE
}

type Properties {
  title: String!
}

input PropertiesInput {
  title: String!
}

type Query {
  getBlocks(id: String!): [Block!]!
  getPage(id: String!): PageWithAncestry!
  getPages(ids: String!): [Page!]!
  getWorkspace: WorkspaceReturn!
  logout: Boolean!
  signin(email: String!, password: String!): User!
}

type RichTextObject {
  styles: [Style!]!
  text: String!
}

input RichTextObjectInput {
  styles: [RichTextStyleInput!]!
  text: String!
}

input RichTextStyleInput {
  length: Float!
  offset: Float!
  style: String!
}

type Style {
  length: Float!
  offset: Float!
  style: String!
}

input UpdateBlockInput {
  id: ID!
  object: RichTextObjectInput
  order: Float
}

input UpdatePageInput {
  favorite: Boolean
  hierarchy: HierarchyInput
  icon: IconInput
  id: ID!
  parent: ParentInput
  properties: PropertiesInput
}

type User {
  createdAt: DateTime!
  currentWorkspace: ID!
  email: String!
  id: ID!
  name: String!
  updatedAt: DateTime!
  workspaces: [ID!]!
}

type UserAndDate {
  time: DateTime!
  user: User!
}

input UserInput {
  email: String!
  name: String!
  password: String!
}

type WorkspaceReturn {
  favorites: [Page!]!
  private: [Page!]!
}
